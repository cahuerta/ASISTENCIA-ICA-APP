name: Android Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # Variables globales del job
    env:
      BUILD_TOOLS: "35.0.0"
      ANDROID_API: "35"
      # Cargar el secret en env (si no existe queda vacío y NO rompe el parser)
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # Instala SDK/Build-tools y acepta licencias (más simple y robusto)
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API }}
          build-tools: ${{ env.BUILD_TOOLS }}

      # Solo crea el keystore si de verdad subiste el secret
      - name: Create keystore from secret (optional)
        if: env.KEYSTORE_BASE64 != ''
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks

      # Escribe credenciales (solo si existe el keystore)
      - name: Write signing credentials
        if: env.KEYSTORE_BASE64 != ''
        run: |
          {
            echo "MYAPP_UPLOAD_STORE_FILE=keystore.jks"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_PASSWORD"
            echo "MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEY_PASSWORD"
          } >> gradle.properties

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Release
        run: ./gradlew --no-daemon assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/app-release.apk
